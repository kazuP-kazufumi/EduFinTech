# Docker Composeのバージョンを指定
# version: '3'

# 各サービス（コンテナ）の定義を開始
services:
  # Railsアプリケーションを実行するWebサービス
  # アプリケーションのメインコンテナとして機能
  web:
    # 開発環境用のDockerfileを使用してイメージをビルド
    build:
      context: . # ビルドコンテキストをカレントディレクトリに設定
      dockerfile: Dockerfile.dev # 開発環境用のDockerfileを指定
    
    # ホストマシンとコンテナ間のファイル共有設定
    volumes:
      - .:/app # ソースコードの変更をリアルタイムに反映するためのマウント
      - bundle:/usr/local/bundle # gemのインストール結果を永続化し、ビルド時間を短縮
    
    # ポートマッピング設定
    ports:
      - "3000:3000" # ホストの3000番ポートをコンテナの3000番ポートに接続
    
    # 起動順序の制御
    depends_on:
      - db    # データベースコンテナが先に起動することを保証
      - redis # Redisコンテナが先に起動することを保証
    
    # 環境変数の設定
    environment:
      # PostgreSQLデータベースへの接続情報
      - DATABASE_URL=postgresql://postgres:password@db:5432/${DATABASE_NAME:-edufintech_development}
      # Redisサーバーへの接続情報（セッション管理・キャッシュ用）
      - REDIS_URL=redis://redis:6379/1
      # Rails環境の設定
      - RAILS_ENV=development
    
    # コンテナの対話モード設定
    tty: true        # 疑似TTYを割り当て（デバッグ出力用）
    stdin_open: true # 標準入力を開いたままにする（デバッグ用）

  # PostgreSQLデータベースサービス
  # アプリケーションのメインデータベースとして機能
  db:
    image: postgres:14 # PostgreSQL version 14の公式イメージを使用
    volumes:
      # データベースファイルを永続化（コンテナ再起動時にもデータを保持）
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=password # データベースのrootパスワードを設定

  # Redisサービス
  # セッション管理、キャッシュ、ActionCableのPubSub機能に使用
  redis:
    image: redis:7 # Redis version 7の公式イメージを使用
    ports:
      - "6379:6379" # Redisのデフォルトポートをホストにマッピング

# 永続化するボリュームの定義
volumes:
  postgres_data: # PostgreSQLのデータファイルを保存するボリューム
  bundle:        # Bundlerでインストールしたgemを保存するボリューム