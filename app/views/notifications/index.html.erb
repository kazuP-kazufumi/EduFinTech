<%# 通知一覧ページのメインコンテナ - 最小の高さを画面いっぱいに設定し、背景色をグレーに %>
<div class="min-h-screen bg-gray-100">
  <%# コンテンツの最大幅を制限し、中央寄せと余白を設定 - レスポンシブデザインのためのブレークポイントも設定 %>
  <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <%# ヘッダーセクション - ページタイトルを表示するエリア %>
    <div class="px-4 py-5 sm:px-0">
      <%# メインタイトル - 大きめのフォントで目立つように設定 %>
      <h1 class="text-3xl font-bold text-gray-900">
        通知一覧
      </h1>
    </div>

    <%# 通知一覧セクション - ヘッダーから適度な間隔を確保 %>
    <div class="mt-8">
      <%# 通知の有無による条件分岐 %>
      <% if @notifications.any? %>
        <%# 通知がある場合 - 白背景のカードスタイルで表示 %>
        <div class="bg-white shadow overflow-hidden sm:rounded-md">
          <%# 通知リスト - 各通知をボーダーで区切って表示 %>
          <ul class="divide-y divide-gray-200">
            <%# 各通知をループで表示 %>
            <% @notifications.each do |notification| %>
              <li class="notification-item <%= 'bg-gray-50' unless notification.read %>" data-notification-id="<%= notification.id %>">
                <%# 通知アイテム - 適切な余白とレイアウトを設定 %>
                <div class="px-4 py-4 sm:px-6">
                  <%# 通知メッセージと操作ボタンを横並びに配置 %>
                  <div class="flex items-center justify-between">
                    <%# 通知メッセージ - notification_helperを使用してメッセージを生成 %>
                    <p class="text-sm font-medium text-gray-900">
                      <%= notification_message(notification) %>
                    </p>
                    <%# アクションボタンエリア - 支援リクエストの場合のみボタンを表示 %>
                    <div class="ml-2 flex-shrink-0 flex">
                      <% if notification.notification_type == 'support_request' %>
                        <%# 交渉開始ボタン - インディゴカラーのアクセントボタン %>
                        <button type="button" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                          交渉を開始する
                        </button>
                      <% end %>
                    </div>
                  </div>
                  <%# 通知のメタ情報エリア - 作成日時などの付加情報を表示 %>
                  <div class="mt-2 sm:flex sm:justify-between">
                    <div class="sm:flex">
                      <%# 通知の作成日時 - 日本語フォーマットで表示 %>
                      <p class="flex items-center text-sm text-gray-500">
                        <%= notification.created_at.strftime("%Y年%m月%d日 %H:%M") %>
                      </p>
                    </div>
                  </div>
                </div>
              </li>
            <% end %>
          </ul>
        </div>
      <% else %>
        <%# 通知がない場合 - シンプルなメッセージを表示 %>
        <div class="bg-white shadow overflow-hidden sm:rounded-lg">
          <div class="px-4 py-5 sm:p-6">
            <p class="text-sm text-gray-500">
              通知はありません
            </p>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<%# 通知の既読処理のためのJavaScript - 通知をクリックすると既読状態に更新する %>
<%= javascript_tag do %>
  <%# DOMの読み込み完了後に処理を実行 %>
  document.addEventListener('DOMContentLoaded', function() {
    <%# 通知アイテムの要素を全て取得 %>
    <%# notification-itemクラスを持つ要素が対象 %>
    const notificationItems = document.querySelectorAll('.notification-item');
    
    <%# 各通知アイテムにクリックイベントリスナーを設定 %>
    notificationItems.forEach(item => {
      item.addEventListener('click', function() {
        <%# クリックされた要素からdata-notification-id属性の値を取得 %>
        <%# この値は通知のIDを表す %>
        const notificationId = this.dataset.notificationId;
        
        <%# Fetch APIを使用して非同期でサーバーに既読状態の更新をリクエスト %>
        <%# /notifications/:id/mark_as_readエンドポイントにPATCHリクエストを送信 %>
        fetch(`/notifications/${notificationId}/mark_as_read`, {
          method: 'PATCH',
          headers: {
            <%# CSRF対策のトークンをヘッダーに含める %>
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
            <%# JSONレスポンスを要求 %>
            'Accept': 'application/json'
          }
        })
        <%# レスポンスをJSONとしてパース %>
        .then(response => response.json())
        <%# 更新成功時の処理 %>
        .then(data => {
          if (data.success) {
            <%# 既読状態を視覚的に表現するための背景色クラスを削除 %>
            <%# bg-gray-50クラスが削除され、白背景になる %>
            this.classList.remove('bg-gray-50');
          }
        })
        <%# エラー発生時はコンソールにエラーを出力 %>
        .catch(error => console.error('Error:', error));
      });
    });
  });
<% end %> 